{"ast":null,"code":"var _jsxFileName = \"/Users/joannebadua/Desktop/reading-rainbow-google-api/client/src/pages/Books.js\";\nimport React, { Component } from \"react\"; // import DeleteBtn from \"../components/DeleteBtn\";\n\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\"; // import API from \"../controllers/bookControllers\";\n// dont need to import in the front end because this is a back-end file\n// import { Link } from \"react-router-dom\";\n\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, FormBtn } from \"../components/Form\";\n\nclass Books extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      books: [],\n      query: \"\"\n    };\n\n    this.saveBook = index => {\n      let bookData = this.state.books[index];\n      const newBook = {\n        title: bookData.volumeInfo.title,\n        author: bookData.volumeInfo.authors,\n        image: bookData.volumeInfo.image,\n        link: bookData.volumeInfo.link,\n        description: bookData.volumeInfo.description,\n        googleId: bookData.volumeInfo.id\n      };\n      console.log(\"Tuesday\", newBook);\n      API.saveBook(newBook);\n      console.log(\"newBook\", newBook); // .then(res => {\n      //   const newBookarr = this.state.books.filter((newBook) => {\n      //       return newBook;\n      // }\n      // )\n      // }) \n      // return all books but the one with the newBook.id\n      // this.setState({\n      //   books: newBookarr\n      // })\n    };\n\n    this.handleInputChange = event => {\n      //this handles input change in what the user types\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleFormSubmit = event => {\n      event.preventDefault();\n\n      if (this.state.query) {\n        //user types \"1984\", and clicks submit. \n        //API.getBooks will get triggered - look at API.js file. API.getBooks\n        API.getBooks(this.state.query) //fire off the API\n        .then(res => {\n          // res => this.setState({\n          //   books: res, \n          //   query: \"\",\n          //   // query is what the user types in, and res is the thing that we get back\n          // })\n          console.log(\"google API :-)\", res); //** */res will be the books from the google API which completes the cyclce\n\n          this.setState({\n            books: res.data\n          });\n        });\n      }\n    };\n\n    this.handleSaveBook = id => {\n      const savedBook = this.state.books.filter(book => book.id === id);\n      const bookDetails = {\n        googleId: id\n      };\n    };\n  }\n\n  render() {\n    return React.createElement(Container, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Col, {\n      size: \"md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"What Books Should I Read?\")), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Input, {\n      value: this.state.query,\n      onChange: this.handleInputChange,\n      name: \"query\",\n      placeholder: \"For Example: Noli Me Tangere (required)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(FormBtn, {\n      disabled: !this.state.query,\n      onClick: this.handleFormSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Search\")))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Col, {\n      size: \"md-6 sm-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Books On My List\")), this.state.books.length ? React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, this.state.books.map((book, i) => React.createElement(ListItem, {\n      key: \"googlebook-\".concat(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, book.volumeInfo.title), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, book.volumeInfo.authors), React.createElement(\"img\", {\n      href: book.volumeInfo.image,\n      alt: book.volumeInfo.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, book.volumeInfo.description), React.createElement(\"a\", {\n      href: book.volumeInfo.link,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"View book\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.saveBook(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Save\")))) : React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"No Results to Display\"))));\n  }\n\n}\n\nexport default Books;","map":{"version":3,"sources":["/Users/joannebadua/Desktop/reading-rainbow-google-api/client/src/pages/Books.js"],"names":["React","Component","Jumbotron","API","Col","Row","Container","List","ListItem","Input","FormBtn","Books","state","books","query","saveBook","index","bookData","newBook","title","volumeInfo","author","authors","image","link","description","googleId","id","console","log","handleInputChange","event","target","name","value","setState","handleFormSubmit","preventDefault","getBooks","then","res","data","handleSaveBook","savedBook","filter","book","bookDetails","render","length","map","i"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\n// import API from \"../controllers/bookControllers\";\n// dont need to import in the front end because this is a back-end file\n// import { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, FormBtn } from \"../components/Form\";\n\nclass Books extends Component {\n  state = {\n    books: [],\n    query: \"\"\n  };\n\n  saveBook = (index) => {\n    let bookData = this.state.books[index];\n    \n    const newBook = {\n      title: bookData.volumeInfo.title,\n      author: bookData.volumeInfo.authors,\n      image: bookData.volumeInfo.image,\n      link: bookData.volumeInfo.link,\n      description: bookData.volumeInfo.description,\n      googleId: bookData.volumeInfo.id\n    }\n    console.log(\"Tuesday\", newBook)\n    API.saveBook(newBook)\n    console.log(\"newBook\", newBook)\n    // .then(res => {\n    //   const newBookarr = this.state.books.filter((newBook) => {\n    //       return newBook;\n      // }\n      // )\n    // }) \n      // return all books but the one with the newBook.id\n\n      // this.setState({\n      //   books: newBookarr\n      // })\n    }\n    handleInputChange = event => {\n      //this handles input change in what the user types\n        const { name, value } = event.target;\n        this.setState({\n          [name]: value\n        });\n      };\n    \n      handleFormSubmit = event => {\n        event.preventDefault();\n        if (this.state.query) {\n          //user types \"1984\", and clicks submit. \n          //API.getBooks will get triggered - look at API.js file. API.getBooks\n          API.getBooks(this.state.query)\n          //fire off the API\n            .then((res) => {\n              // res => this.setState({\n              //   books: res, \n              //   query: \"\",\n              //   // query is what the user types in, and res is the thing that we get back\n              // })\n              console.log(\"google API :-)\", res);\n              //** */res will be the books from the google API which completes the cyclce\n              this.setState({books: res.data})\n              })          \n        }\n      };\n    \n      handleSaveBook = id => {\n        const savedBook = this.state.books.filter(book => book.id === id)\n        const bookDetails = {\n          googleId: id,\n        }\n      }\n      render() {\n        return (\n          <Container fluid>\n            <Row>\n              <Col size=\"md-6\">\n                <Jumbotron>\n                  <h1>What Books Should I Read?</h1>\n                </Jumbotron>\n                <form>\n                  <Input\n                    value={this.state.query}\n                    onChange={this.handleInputChange}\n                    name=\"query\"\n                    placeholder=\"For Example: Noli Me Tangere (required)\"\n                  />\n                  <FormBtn\n                    disabled={!(this.state.query)}\n                    onClick={this.handleFormSubmit}\n                  >\n                    Search\n                  </FormBtn>\n                </form>\n              </Col>\n              </Row>\n\n              <Row>\n              <Col size=\"md-6 sm-12\">\n                <Jumbotron>\n                  <h1>Books On My List</h1>\n                </Jumbotron>\n                {this.state.books.length ? (\n                  <List>\n                    {this.state.books.map((book, i) => (\n                      <ListItem key={`googlebook-${i}`}>\n                        <h4>{book.volumeInfo.title}</h4>\n                        <h3>{book.volumeInfo.authors}</h3>\n                        <img href={book.volumeInfo.image} alt={book.volumeInfo.title}/>\n                        <p>{book.volumeInfo.description}</p>\n                        <a href={book.volumeInfo.link}>View book</a><br></br>\n                        <button onClick={()=>(this.saveBook(i))}>Save</button>\n                      </ListItem>\n                    ))}\n                  </List>\n                ) : (\n                  <h3>No Results to Display</h3>\n                )}\n              </Col>\n            </Row>\n          </Container>\n        );\n      }\n    }\n\n\n    export default Books;"]},"metadata":{},"sourceType":"module"}